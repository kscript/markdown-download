import qs from"qs";import{mergeLocalOptions}from"./options";const noop=(e,t)=>"function"==typeof e?e:"function"==typeof t?t:()=>{};export const blob2array=e=>new Promise(((t,o)=>{const r=new FileReader;r.onload=()=>{t(Array.from(new Uint8Array(r.result)))},r.onerror=o,r.readAsArrayBuffer(e)}));export const array2blob=(e,t="")=>new Blob([new Uint8Array(e)],{type:t});export const fetchBlobFile=e=>new Promise((t=>{e.content?t(new Blob([e.content],{type:e.type||"text/plain"})):chrome.runtime.sendMessage({type:"get",url:e.downloadUrl,dataType:"blob"},(([o,r])=>{chrome.runtime.lastError?console.error(chrome.runtime.lastError.message):t(o?new Blob([e.downloadUrl],{type:"text/plain"}):array2blob(r.data,r.mimeType||"text/plain"))}))}));export const ajax=async e=>{const t=await mergeLocalOptions(),o=(t=3)=>{const{method:r="get",data:n,dataType:a,headers:s,success:l}=e,i={method:r,headers:s instanceof Object?s:{}};/get/i.test(r)?e.url+=(/\?/.test(e.url)?"&":"?")+qs.stringify(n):i.body=JSON.stringify(n),fetch(e.url,Object.assign(i)).then((e=>e[a]?e[a]():e.text())).then(l).catch((r=>{t-- >0?setTimeout((()=>{o(t-1)}),3e3):noop(e.error)(r)}))};o(t.retry)};export default{ajax,fetchBlobFile};